Parameters are variables listed as a part of the function definition.
Arguments are values passed to the function when it is invoked.

this is the object that the function is a property of
https://www.udemy.com/course/advanced-javascript-concepts/learn/lecture/13772916#questions
const obj = {
	name:"Billy",
	sing() {
		return "lalala " + this.name
	},
	singAgain() {
		return this.sing() + "!";
	}
}
obj.sing();
obj.singAgain();

this refers to what is present on left side of the dot where the function is called

In javascript our lexical scope that is available data variables where the function was
defined determines are available variables not where the function is called which is called Dynamic


========Ways to call a function========

1. Invoking a Function as a Function
function myFunction(a, b) {
  return a * b;
}
myFunction(10, 2); 

2. Invoking a Function as an Object Method
var myObject = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}
myObject.fullName();  

3. Invoking a Function with a Function Constructor
// This is a function constructor:
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName  = arg2;
}

// This creates a new object
var x = new myFunction("John", "Doe");
x.firstName;                             // Will return "John"

4. Invoking function with apply() and call() methods-
explained after next this section


========================JS this Keyword -

https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c
In a method, this refers to the owner object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), and apply() can refer this to any object.

================CAB -> Call, Apply, Bind==========
https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp
	Call - The first parameter in call() method sets the "this" value, which is the object, on which the function is invoked upon. The rest of the parameters are the arguments to the actual function.
	Apply - The apply() is similar to call() only difference being method takes arguments as an array.
	Bind - we are returning a bound function with the context which will be invoked later.

Uses - You can use call()/apply() to invoke the function immediately. bind() returns a bound function that, when executed later, will have the correct context ("this") for calling the original function. So bind() can be used when the function needs to be called later in certain events when it's useful.
	
Call - 
//Demo with javascript .call()
var obj = {name:"Niladri"};
var greeting = function(a,b,c){
    return "welcome "+this.name+" to "+a+" "+b+" in "+c;
};
console.log(greeting.call(obj,"Newtown","KOLKATA","WB"));
// returns output as welcome Niladri to Newtown KOLKATA in WB

Apply - 
//Demo with javascript .apply()
var obj = {name:"Niladri"};
var greeting = function(a,b,c){
    return "welcome "+this.name+" to "+a+" "+b+" in "+c;
};
// array of arguments to the actual function
var args = ["Newtown","KOLKATA","WB"];  
console.log("Output using .apply() below ")
console.log(greeting.apply(obj,args));
/* The output will be 
  Output using .apply() below
 welcome Niladri to Newtown KOLKATA in WB */

Bind - 
var obj = {name:"Niladri"};

var greeting = function(a,b,c){
    return "welcome "+this.name+" to "+a+" "+b+" in "+c;
};

//creates a bound function that has same body and parameters 
var bound = greeting.bind(obj, 'Newtown'); 	// we can provide 0 or more arguments we want to pass as static here after obj. this is also called function currying

console.dir(bound); ///returns a function
console.log("Output using .bind() below ");
console.log(bound("KOLKATA","WB")); //call the bound function

/* the output will be 
Output using .bind() below
welcome Niladri to Newtown KOLKATA in WB */

=====================JS callback=====================

https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced
Callbacks are a great way to handle something after something else has been completed. By something here we mean a function execution. If we want to execute a function right after the return of some other function, then callbacks can be used.
Callbacks are a way to make sure certain code doesn’t execute until other code has already finished execution.

Syntax - function add(a, b , callback) -> add() function is called with arguments a, b and callback, callback will be executed just after ending of add() function 

function doHomework(subject, callback) {
  alert(`Starting my ${subject} homework.`);
  callback();
}
doHomework('math', function() {
  alert('Finished my homework');
});

or or or or

function doHomework(subject, callback) {
  alert(`Starting my ${subject} homework.`);
  callback();
}
function alertFinished(){
  alert('Finished my homework');
}
doHomework('math', alertFinished);


Array

const arr1 = ['a', 'b', 'c', 'x'];
const arr2 = ['m', 'n', 'x', 'y', 'r'];

1. const set1 = new Set();
	This is used to store different unique elements to the set1 and is used to find duplicates
	set1.add(arr1[i]) -> is used to add non duplicate element
	set1.has(arr2[i])	-> is used to check if the element already exist or not
	
2. Adding array to object
	let tally={}; To add array to object, loop through each element in array to add like below - 
	map[arr1[i]]=true; -> this will take the property as array value and the value is defaulted to true
	
	true
	
3. arr1.some() -> this is used to check if arr1 matches the value passed in ()
	Like arr1.some(item => arr2.includes(item)) - here arr1 each item is being checked in arr2 and return true is done if match found
	
4. str.split('') - this functions splits the string in the form of array

5. str.split('').reverse() - this function reverses the split string array

6. str.split('').reverse().join(''); - this function joins the reversed split str array

7. unshift() and shift() operate in the same way as push() and pop(), except that they add/remove values to the BEGINNING of an array.

8. slice() is used to copy different portions of an array, e.g.: 
	var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; 
	var citrus = fruits.slice(1, 3); …leads to… 
	var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; 
	var citrus = ['Orange', 'Lemon'];
	
9. splice() To Remove an element, use this syntax: 
	var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; 
	fruits.splice(1, 2); …leads to… 
	var fruits = ['Banana', 'Apple', 'Mango'];
	
	Add
	var fruits = ['Banana', 'Apple', 'Mango']; 
	fruits.splice(1, 0, 'Orange', 'Lemon'); …leads to… 
	var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
	
10. var colors = ['red', 'orange', 'yellow', 'green']; 
	colors.forEach(function(color) { // "color" is a placeholder to represent a 
		console.log(color); 		 // singular instance of any given element in 
	}); 							 // the collection; call it whatever you want
	
11. Higher Order Functions - When you have a function which receives a function as an argument, it is called as higher order function, e.g. map, filter, reduce
Example 1- 
function add(x, y) {
	return x+y;
}
function higherOrderFunction(a, callback) {
	return callback(5, a);
}
higherOrderFunction(10, add)

this outputs 15

Example 2
setInterval(function() { // code that you want to run every second; }, 1000);

	
12. Undefined vs Undeclared - undefined variables are those that are not assigned any value but declared in the program. if we try to read the value, undefined is displayed
								var a;
								alert(a);	// this will output undefined
							undeclared values are those that are not declared in the program. If we try to read their values it will give runtime error.
								alert("hello"+"--"+b);	//	Uncaught ReferenceError: b is not defined
								
13. Coercion in Javascript
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
	let a=4; let b="4";
	console.log(a+b);	// "44"
	console.log(b+a);	// "44"
	Rule for implicit coercion: Comparison by using == does implicit type conversion under the hood. And rules for implicit coercion are as follows-
	->	If both operands are same type use ===
	->	undefined == null
	->	If one operands is string another is number, convert string to number
	->	If one is boolean and another is non-boolean, convert boolean to number and then perform comparison
	->	While comparing a string or number to an object, try to convert the object to a primitive type and then try to compare
	
	a. console.log("5" - 5);	//	returns 0
	b. console.log("5" + 5);	//	returns 55
	c. const giveType = typeof 5	// console log returns number
	d. const giveType = typeof "5"	// console log returns string
	e. const giveType = typeof {}	// console log returns object
	f. const adder = true + 5;		// console log returns 6
	g. const adder = false + 5;		// console log returns 5
	
	Values that interpret as false
	a. false
	b. 0
	c. ""
	d. null
	e. undefined
	f. NaN
	
	Everything else is true
	
	var a = {a: 1};
	var b = {a: 1};
	a == b //false
	a === b //false
	
	
	Some other cases
	true%1	//	0
	''%1	//	0
	[]==true	//	false	//Since left and right side of the equality are two different types, JavaScript can't compare them directly . Hence, under the hood, JavaScript will 	 convert them to compare. first right side of the equality will be cooereced to a number and number of true would be 1.
							//After that, JavaScript implementation will try to convert [] by usingtoPrimitive (of JavaScript implementation). since [].valueOf is not primitive will use toString and will get ""
							//Now you are comparing "" == 1 and still left and right is not same type. Hence left side will be converted again to a number and empty string will be 0.
	
	
14. Object Equality
	
	var e = {a:1,b:2,c:3};
	var eProps = Object.getOwnPropertyNames(e);
	console.log(eProps);	//	(3) ["a", "b", "c"]
	
15 Math.max to find max in array
	let arr = [3,6,1,7,2,9,11,5];
	function getMax(arr)	{
		return Math.max.apply(null, arr);
	}
	getMax(arr);	// 11
	
16	= operator has associativity from right to left means - 
	let a = 6; 	\\ this means the value defined on the right is assigned to left variable a
	+, -, /, * operators have associativity from left to right (it follows bodmas rule) means -
	console.log(+"3"+2+6);	// prints 11 because it starts checking from left, + opeartor comes, so it thinks this is addition operation so converts 3 to a number and move on
	console.log("3"+2+6);	// prints 326	because it encounters " so it thinks this is string operation so concatenates
	let a=3, b=8, c=6; 	console.log(a+b+"Mayank"+b+c)	// prints 11Mayank86, here initially it starts with a which is number so it adds a and b, then it tries adding Mayank which is 
														// string so JS says okay string is here so lets concatenate and further ahead aslo it considers it as string hence 11Mayank86
	
17.	IIFE (Immediately Invoked Function Expression)

18. Closures in JavaScript - 
	Closure is simply that a combination of function and the lexical environment from which it was declared. Closures allow a function to access variables from an enclosing scope or environment even after it leaves the scope in which it was declared.
	a. 	Variables - Any function where you are using a variable from outside the scope are actually closures
	Example1 - Below once the function a() is run then grandpa variable is stored in closure box instead of garbage collecting it (since function reached the end (return statement)), similarly with father variable because when the execution reaches a();, the compiler knows that grandpa and father variables are being used by child, if there is any other variable like num which is not used by child those are not stored in closure box.
		function a() {
  			let grandpa = 'grandpa'
			let num = 123
  			return function b() {
    			let father = 'father'
    			return function c() {
      				let son = 'son'
      				return `${grandpa} > ${father} > ${son}`
    			}
  			}
		}
		a();

	Example2 - 
		const boo = (string) => (name) => (name2) => console.log(`hi ${name} ${name2}`)
		boo('hi')('john')('tanya');

	Example3 - If we put the var callMe in the start or the end, it does not matter because setTimeout is web api which gets pushed to the web api part of event loop and when it comes back by that time callMe is initialized.
		function callMeMaybe() {
    		const callMe = 'Hi!';
    		setTimeout(function() {
        		console.log(callMe);
    		}, 4000);
			//const callMe = 'Hi!';
		}
		callMeMaybe();

	Example4 - Memory efficient
		function heavyDuty(item) {
  			const bigArray = new Array(7000).fill('😄')
  			console.log('created!');
  			return bigArray[item]
		}
		heavyDuty(699)
		heavyDuty(699)
		heavyDuty(699)

		// but in above approach array gets created everytime, we need to overcome this by below solution
		function heavyDuty2() {
  			const bigArray = new Array(7000).fill('😄')
  			console.log('created Again!')
  			return function(item) {
    			return bigArray[item]
  			}
		}
		const getHeavyDuty = heavyDuty2();
		getHeavyDuty(699)
		getHeavyDuty(699)
		getHeavyDuty(699)

	Example 5 - Here we cannot run launch function because launch function is encapsulated and we want some functions to be hidden from the world
	const makeNuclearButton = () => {
  		let timeWithoutDestruction = 0;
  		const passTime = () => timeWithoutDestruction++;
  		const totalPeaceTime = () => timeWithoutDestruction;
  		const launch = () => {
    		timeWithoutDestruction = -1;
    		return '💥';
  		}
	  	setInterval(passTime, 1000);
  		return {totalPeaceTime}
	}
	const ww3 = makeNuclearButton();
	ww3.totalPeaceTime()
	ww3.launch();	

	b. Closures are just functions which preserve data
		var addTo = function(passed){    
			var add = function(inner){
			return passed + inner;  
			};    
		return add;   
		};
		var addThree = new addTo(3);
		var addFour = new addTo(4);
		console.dir(addThree(1));
		console.dir(addFour(1));
		// returns  4 then 5
	
19.	Promises - Makes sure if the conditions are matched then do the next job, (pending, fulfilled or rejected). Promise is created inside the function which needs to be called and inside that only it is defined weather to resolve or reject, so that when function is called we can use .then and .catch 
A promise is an object that may produce a single value sometime in the future either resolved or rejected with a reason why it was rejected and a promise maybe in three possible states(pending, fulfilled or rejected)
https://medium.com/@kevinyckim33/what-are-promises-in-javascript-f1a5fc5b34bf
	Example 1
	let p = new Promise((resolve, reject) => {
		let a=1+1;
		if(a==2) {
			resolve("Success");
		} else {
			reject("Failed");
		}
	});
	
	p.then((message) => {
		console.log("This is in the then "+message);
	}).catch((message) => {
		console.log("This is in the catch "+message);
	});
	
	// Output - This is in the then Success
	
	
	
	Promises All - Returns the output message when all are completed
	Below are three differences promises
	const recordVideoOne = new Promise((resolve, reject) => {
	  resolve('Video 1 Recorded')
	})

	const recordVideoTwo = new Promise((resolve, reject) => {
	  resolve('Video 2 Recorded')
	})

	const recordVideoThree = new Promise((resolve, reject) => {
	  resolve('Video 3 Recorded')
	})
	
	Promise.all([
	  recordVideoOne,
	  recordVideoTwo,
	  recordVideoThree
	]).then(messages => {
	  console.log(messages)
	})
	
	Promises Race - Returns the first function output as soon as anyone of them is completed
	Promise.race([
	  recordVideoOne,
	  recordVideoTwo,
	  recordVideoThree
	]).then(message => {
	  console.log(message)
	})
	
	Example - 
	let promiseToStudy = new Promise((resolve,reject) => {
		let studied = true;
		if(studied) {
			resolve('Play')
		} else {
			reject('Cannot play')
		}
	})
	promiseToStudy.then((result) => {
		console.log(`You can go and ${result}`)
	}).catch((result) => {
		console.log(`You ${result}`)
	})
	

	Example nested promises- 
	let cleanRoom = () => new Promise((resolve,reject) => resolve("I cleaned the room"));
	let removeGarbage = (message) => new Promise((resolve,reject) => resolve(`${message}, I threw away the trash`))
	let winIcecream = (message) => new Promise((resolve,reject) => resolve(`${message}, So I got to eat some ice cream`))
	
	cleanRoom().then(result => removeGarbage(result)).then(result => winIcecream(result)).then(result => console.log(result + " so now I can sleep"))

	Output //I cleaned the room, I threw away the trash, So I got to eat some ice cream so now I can sleep
	
	fetch('https://jsonplaceholder.typicode.com/todos')
  		.then(response => response.json())
  		.then(json => console.log(json))

================Async Await (ES8)===========
async function fetchUsers() { 
	const resp = await fetch('https://jsonplaceholder.typicode.com/users')
	const data = await resp.json();
	console.log(data);
}


===========ES9 (2018)=============
1. Spread Operator
	const animals = {tiger:23, lion:5, monkey:2, bird:40}
	const {tiger, ...rest} = animals;
	// output 	tiger	5
				rest	{lion: 5, monkey: 2, bird:40}

2. function objectSpread(p1,p2,p3) {
	console.log(p1); console.log(p2); console.log(p3);
   }
   const {tiger, lion, ...rest} = animals;
   objectSpread(tiger, lion, rest);		//23, 5, {monkey: 2, bird:40}}



Rapid Fire	-

1. 	Question: What is typeof [], typeof arguments
	Answer: Object. Actually Array is derived from Object. If you want to check array use Array.isArray(arr)
					arguments are array like but not array. it has length, can access by index but can't push pop, etc.
					
2.	What is the value of 4+3+2+"1"
	"91"
	
3. 	var ab = (2,3,5);
	console.log(ab);	// 5	//The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand. ref: MDN
	
4. 	!'bang' returns false
	!!'bang' returns true
	
5. 	Question: What is the value of Math.max([2,3,4,5]);
	Answer: NaN
	
6. 	Question:null == undefined
	Answer: true
	
7. 	Question: Does JavaScript pass parameter by value or by reference?
	Answer: Primitive type (string, number, etc.) are passed by value and objects are passed by reference.
	
8. 	(function(){
		var a = b = 3;
	})();
	console.log("a defined? " + (typeof a !== 'undefined'));
	console.log("b defined? " + (typeof b !== 'undefined'));;;;
	
	Answer:	a defined? false	// because var a=b, and b=3.... so a is undefined and b defined value of 3
			b defined? true		// because like above
			
9.	var myObject = {
		foo: "bar",
		func: function() {
			var self = this;
			console.log("outer func:  this.foo = " + this.foo);
			console.log("outer func:  self.foo = " + self.foo);
			(function() {
				console.log("inner func:  this.foo = " + this.foo);
				console.log("inner func:  self.foo = " + self.foo);
			}());
		}
	};
	myObject.func();
	
	Answer:	outer func:  this.foo = bar
			outer func:  self.foo = bar
			inner func:  this.foo = undefined
			inner func:  self.foo = bar
			

10. Interpreter vs Compiler
	Interpreter - reads the code line by line and then tries to solve the problem after converting it to byte code
	Compiler - scans the full code and directly converts it into machine level language, since it takes time but since it sees through full code, it can replace some function calls with the output or full function so to run faster
	
	High level language		->			Byte Code		->		Machine Code
	Javascript code						Interpreter			Compiler
	
	We can use any of the above two to run the program.
	

11. Babel is a Javascript compiler that takes your modern JS code and returns  browser compatible JS (older JS code).
	Typescript is a superset of Javascript that compiles down to Javascript.
	
12. JIT compiler - Combination of Interpreter and compiler

13. V8 Engine of chrome - Steps it takes to run the code - 
	a. JS code is send to the PARSER (Parse the code) and turn it into AST (ABSTRACT SYNTAX TREE)
	b. And code then goes to Interpreter and it spits out bytecode and the program starts running.
	c. Now this bytecode also goes to PROFILER and this checks how we can optimize the code.
	d. If PROFILER sees any code which can be optimised than it sends the code to COMPILER.
	e. The compiler spits out optimised bytecode which then will be used instead of Interpreter bytecode.

14. Memory heap - This simple states that whenever we define a variable and assign a value, it gets stored in the memory heap randomly anywhere.

15. Call Stack - Whenever we create a function and call it, the function gets send to call stack and after the completion of execution call stack removes the function.

16. Memory leak types
	a. Gloabl Variables 
	b. Event Listeners
	c. SetInterval 

17. Execution context
	a. When executing the code, first execution is global and then the functions inside the code
	b. this === window, this will return true

18. Lexical Environment
	a. THis means that whenever we create any function, a new world is created or for say a new lexical environment is created.
	b. Execution context tells us which lexical environment is currently running then it means in which function the code is currently running.
	c. The very first lexical environment is global lexical environment.

19. Hoisting - This term means that when we write any code, then while running the compiler first scans through the whole code and allocates memory to the functions and var declarations. E.g.

console.log("1.....");
console.log(teddy);
console.log(sing());
console.log(sing2());
var teddy = 'bear';
function sing() {	//function declaration
	console.log('Ohh la la la');
}
var sing2 = function() {	//function expression
	console.log('Uhh la la la');
}

	a. Above will print 1....., 
	b. then it prints undefined because compiler scans the code and assigns a memory for variable teddy but with value undefined (P.S. if we use let or const, this functionality does not happen). 
	c. then it prints 'Ohh la la la' beacuse function sing gets memory allocated when compiler scans the code.
	d. then error is print because again var is defined which means undefined. If we just use sing2, then undefined is printed.

Hoisting take aways - 
	a. Variables are partially hoisted
		console.log(one);
		var one = 1;
		var one = 2;	// compiler igores this line since one is already assigned a memory
			// this prints undefined

	b. Functions are fully hoisted 
		a();
		function a() {
  			console.log('hi')
		}
		function a() {
  			console.log('bye')
		}
			// this prints bye

e.g.
function bigBrother(){
  function littleBrother() {
    return 'it is me!';
  }
  return littleBrother();
  function littleBrother() {
    return 'no me!';
  }
}
bigBrother();
// here the output is 'no me!' because when compiler scans the code, inside the lexical context of bigBrother() function, littleBrother function is scanned twice, so in memory no me is hold, now when the program is run then return littleBrother() will display no me output 


20. Function Invocation, Arguments
	a. function marry(p1,p2) {
		console.log(arguments);
		return `${p1} is married to ${p2}`
	}
	marry('Tim', 'Tina')
		// This outputs {0:'Tim', 1:'Tina'}
						Tim is married to Tina
						
21. IIFE - Immediately invoked function expression
	(function() {})()	// this is function expression which is Immediately invoked
	(function(){}())	// this is also correct
	function(){}()	//this is wrong, a function declared cannot be invoked there itself

22. Check if any variable is an array use - 
		Array.isArray([])

23. Primitive types (total 7 types)(number, bigint, string, null, undefined, boolean, symbol) are pass by value
		var a=5; var b=a; b++; clg(a); clg(b)	//5		6
	Non-Primitive types (object, array) are pass by reference

24. Best way to compare two objects
	var user1 = {name : "nerd", org: "dev"};
	var user2 = {name : "nerd", org: "dev"};
	var eq = JSON.stringify(user1) === JSON.stringify(user2);
	alert(eq);

25. Static vs Dynamic language - 
	In static type language we need to define the type of the variable. e.g in C++, int a = 100;
	In dynamic we do not need to define the type. e.g. javascript, var a = 100; Typescript allows us to make javascript to behave like a static type language, it adds types to javascript, so it makes javascript extra safe.

26. Strong vs Weak Language - 
	In Strongly typed language, we cannot add string to integer. e.g. in python a="Hello"; a+17	//will throw an error
	In Weakly typed language, we can add string to integer. e.g. var a="Hello"; a+17	//will output Hello17


27. Prototypal Inheritance
	Every function or array is an object in javascript.
	In the console if we create an array	-> let array = [];
	and type array.__proto__, we get properties which we can use for array
	if we type array.__proto__.__proto__, we get the base object
	Same case with function 

	Example 1 - 
let dragon = {
  name: 'Tanya',
  fire: true,
  fight() {
    return 5
  },
  sing() {
    if (this.fire) {
      return `I am ${this.name}, the breather of fire`
    }
  }
}
let lizard = {
  name: 'Kiki',
  fight() {
    return 1
  }
}
lizard.__proto__ = dragon;		//here we define that all the methods and variables can be used by lizard, BUT THIS IS BAD FOR PERFORMANCE
dragon.isPrototypeOf(lizard);	//here we check if lizard inherit from dragon, yes 
console.log(lizard.fire)
console.log(lizard.sing())

	Example 2 - 
function multiplyBy5(num) {
  return num*5
}
multiplyBy5.__proto__	// this is the pointer to __proto__ native function
Function.prototype		// this is the same function above command is referencing to
Object.prototype		// give the properties of base object
						// __proto__ is just a pointer to up the chain prototype object, __proto__ property lives on prototype 

	Example 3 - Instead of using __proto__ use Object.create for better performance
// Create our own prototypes:
var human = {mortal: true}
var socrates = Object.create(human);
human.isPrototypeOf(socrates); // true

DEEP CONCEPTS 

Deepest level 	- Object.prototype			//{constructor: ƒ, __defineGetter__: ƒ, ƒ, hasOwnProperty: ƒ, etc}
1 level up		- function a() { return 1+1 };, 
						a.__proto__.__proto__	// function pointing to deepest level
2 level up		- a.__proto__				// function we created pointed to function

So, to explain here, if we create a function and then we need to reference the methods defined inside base prototype object, then we need to use a.__proto__.call or bind etc 
IF we create and empty object or an array or none of them has access to prototype, only functions have prototype
String.prototype is possible and same case with Boolean, Number, etc 
Check Evernote for more.... Object in JS

Date.prototype.lastYear = function() {
	const year = this.toString().slice(11, 15)
  return year - 1;
}
new Date('2019-10-10').lastYear();


======================Javascript Prototypes===================

https://www.w3schools.com/js/js_object_prototypes.asp
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}
Person.prototype.nationality = "English";
Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};


==========================var & let difference - 

It can be said that a variable declared with var is defined throughout the program as compared to let. var can be defined anywhere in the program, but its scope is present in full program, on the other hand let scope is only present after it is defined in a program only in the block - https://codeburst.io/difference-between-let-and-var-in-javascript-537410b2d707

anonymous function javascript - https://helephant.com/2008/08/23/javascript-anonymous-functions/
var flyToTheMoon = function()
{
  alert("Zoom! Zoom! Zoom!");
}
flyToTheMoon();

Yes do fly hello there


=================null vs undefined - =======================

https://codeburst.io/javascript-whats-the-difference-between-null-undefined-37793b5bfce6
null is an assigned value. It means nothing.
undefined means a variable has been declared but not defined yet.
null is an object. undefined is of type undefined.
null !== undefined but null == undefined.


================================use strict - 
With strict mode, you can not, for example, use undeclared variables. also you cannot delete declared variables. It makes the JS secure. Although earlier without use Strict this was a problem in JS.


=========================setInterval vs setTimeout - 
setTimeout(expression, timeout); runs the code/function once after the timeout. Once - AFTER x interval.
setInterval(expression, timeout); runs the code/function in intervals, with the length of the timeout between them. Repetitive - EVERY x interval.

The JavaScript prototype property also allows you to add new methods to objects constructors:

in a form like below 

<form onSubmit={this.onSubmit}>
	<input type="text" />
	<button>Submit</button>
</form>

if we place onClick inside button, that will make sure that onClick only triggers any action
But, if we place onSubmit in the form tag then it will make sure that button click or press enter both are taken care off
 

=====================OOP CONCEPTS===================

1. Create a function and create objects on top of it
function createElf(name, weapon) {
  //we can also have closures here to hide properties from being changed.
  return {
    name: name,
    weapon: weapon,
    attack() {
      return 'attack with ' + weapon
    }
  }
}
const sam = createElf('Sam', 'bow');
const peter = createElf('Peter', 'bow');
sam.attack()

2. Create separate function and variables separate - Object.create
const elfFunctions = {
	attack() { 
  	return 'attack with ' + this.weapon
	}
}
function createElf(name, weapon) {
	let newElf = Object.create(elfFunctions);	//Prototype inheritance
  	newElf.name = name;
  	newElf.weapon = weapon;
	return newElf;
}
const sam = createElf('Sam', 'bow');
console.log(sam.attack())
const peter = createElf('Peter', 'bow');

3. Constructor Functions - Here we have to use new property to define the function and those functions need to start with capital letters, 
********THIS WAS THE NORM TO CREATE OOP BEFORE CLASSES WERE INTRODUCED (USING PROTOTYPE)**********
function Elf(name, weapon) {
  this.name = name;
  this.weapon = weapon;
}
Elf.prototype.attack = function() { 
  return 'attack with ' + this.weapon
}
const sam = new Elf('Sam', 'bow');
const peter = new Elf('Peter', 'bow');
sam.attack()

4. Classes in ECMA 6 or ECMAScript 2015 - Here we do not put attack() function inside the constructor because every time we instantiate the object of the class, name and weapon are assigned, but attack() function will be used by all the objects created hence reusability.
class Elf {
  constructor(name, weapon) {
    this.name = name;
    this.weapon = weapon;
  }
  attack() {
    return 'attack with ' + this.weapon
  }
}

const fiona = new Elf('Fiona', 'ninja stars');
console.log(fiona instanceof Elf) // 
const ben = new Elf('Ben', 'bow');
fiona.attack()


// new binding
function Person(name, age) {
  this.name = name;
  this.age =age;
  console.log(this);
}

const person1 = new Person('Xavier', 55)

//implicit binding
const person = {
  name: 'Karen',
  age: 40,
  hi() {
    console.log('hi' + this.name)
  }
}

person.hi()

//explicit binding
const person3 = {
  name: 'Karen',
  age: 40,
  hi: function() {
    console.log('hi' + this.setTimeout)
  }.bind(window)
}

person3.hi()

// arrow functions
const person4 = {
  name: 'Karen',
  age: 40,
  hi: function() {
    var inner = () => {
      console.log('hi ' + this.name)
    }
    return inner()
  }
}

person4.hi()


============Inheritance==========

class Character {
  constructor(name, weapon) {
    this.name = name;
    this.weapon = weapon;
  }
  attack() {
    return 'attack with ' + this.weapon
  }
}

class Elf extends Character { 
  constructor(name, weapon, type) {
    // console.log('what am i?', this); this gives an error
    super(name, weapon) 
    console.log('what am i?', this);
    this.type = type;
  }
}

class Ogre extends Character {
  constructor(name, weapon, color) {
    super(name, weapon);
    this.color = color;
  }
  makeFort() { // this is like extending our prototype.
    return 'strongest fort in the world made'
  }
}

const dolby = new Elf('Dolby', 'cloth', 'house')
dolby.attack();
console.log(dolby instanceOf Ogre)	//false
console.log(dolby instanceOf Elf)	//true
console.log(dolby instanceOf Character)	//true
const shrek = new Ogre('Shrek', 'club', 'green')
shrek.attack()



=============Pure Functions============
Pure functions are functions that accept an input and returns a value without modifying any data outside its scope(Side Effects). Its output or return value must depend on the input/arguments and pure functions must return a value.
function a(num1, num2) {
	return num1+num2;
}
function pure(num) {
	return num*2;
}
pure(a(3,4));

function impure() {
	console.log('Hi')
}
impure()	// this is NOT a pure function because it is outputting something to the outside world and using the window object using console.log



=========Functions Properties==========

1. Indempotence - Function which always returns what we expect it to do. e.g. api call
function imde(num) {
	return num
}
imde(5);
A function which calls itself and get sus the same result is also Indempotence function. e.g.
MAth.abs(math.abs(-50))


2. Imperative vs Declarative
Imperative code is the code which tells the machine what to do and how to do. e.g program to bring water
Declarative code is the code which tells the machine what to do and what should happen. e.g. ask human to bring water 

for(let i=0; i<1000; i++) {		//Imperative
	console.log(i);
}
[].forEach(item => console.log(item))	//declarative

jQuery is Imperative, since we tell exactly what and how to do
React is Declarative


3. Immutability
const obj = {name: 'Andrei'}
function clone(obj) {
  return {...obj}; // this is pure
}

function updateName(obj) {
  const obj2 = clone
  (obj);
  obj2.name = 'Nana'
  return obj2
}

const updatedObj = updateName(obj)
console.log(obj, updatedObj)


4. higherOrderFunction (HOF) -
const hof = () => () => 5;
hof()();


5.  Closure -
const closure = function() {
  let count = 0;
  return function increment() {
    return count++;
  }
}
const incrementFn = closure();	//incrementFn remembers the variable value outside the inner function
incrementFn()
incrementFn()
incrementFn()


6. Currying - 
const multiply = (a,b) => a*b;
multiply(3,4)

//we can change this to currying
const curriedMult = (a) => (b) => a*b;
curriedMult(4)(5);

//above is useful by
const curriedMultBy5 = curriedMult(5);
curriedMultBy5(6);


7. Partial Application
//Curried Multiply approach to multiply 3 nums
const curriedMultiply = (a) => (b) => (c) => a*b*c;
curriedMultiply(5)(3)(10);

// now if we need 5 and other parameters after
const multiply = (a,b,c) => a*b*c;
const partialMultiplyBy5 = multiply.bind(null, 5);
partialMultiplyBy5(4,10);


8. Compose - Right to left
const compose = (f,g) =>(data) => f(g(data))
const mutiplyBy3 = (num) => num*3
const makePositive = (num) -> Math.abs(num)
const multiplyBy3AndAbs = compose(mutiplyBy3, makePositive)
multiplyBy3AndAbs(-50)

Pipe - Left to right
const compose = (f,g) =>(data) => g(f(data))


9. Arity - Number of arguments a function takes


============Web Worker============
Web worker acts like a separate thread which can run parallel to the main JS thread, for example running api calls for Node.js
Example
var worker = new Worker('worker.js)
worker.postMessage('Hello')


Web Worker
Web worker is separate Javascript thread which works in background and returns the output for anything send to it
Web Workers is a code of JavaScript which runs in the background threads without disturbing the performance of the page. It is used for computing-heavy tasks like an access database or function.
It has postMessage(object) and onMessage(e) functions where 
1. postMessage is used to send the object to the web worker or send teh result object back to the window.
2. onMessage recieves the input from the postMessage as e which can be used to access the object like e.data.<object>

Properties of Web Worker - 
Web Worker has no access to - window object, document object, parent object
Web Worker has access to - 	navigator object(userAgent, geoLocation, cookeyEnabled)
							location object(host, hostname, href, pathname... etc)
							XMLHTTPRequest(Ajax, setTimeout)
Web worker can spawn more web workers
worker can be terminated using myWorker.terminate();

e.g. webWorkerTest.html
<script>
if(window.worker)	{
	var myWorker = new Worker("worker.js");			//define the worker file
	var message = {addThis: {num1:1,num2:3}};		//define the message
	myWorker.postMessage(message);					//call the worker file function
	myWorker.onMessage = e => {
		console.log(e.data.result);
	};
}
</script>

worker.js
this.onMessage = e => {
	if(e.data.addThis !== undefined)	{
		this.postMessage({result:e.data.addThis.num1+e.data.addThis.num2});
	};
}


============Modules=============
In an html file we can have multiple js files, where we can have variables where two variables with same name are present in js files, so that when we run the scripts one of the variables gets overwritten.
So the concept of modules came in
Earlier
	//Global scope
		//Function scope
			//Block scope

Now
	//Global scope
		//Module scope
			//Function scope
				//Block scope

Function as modules
IIFE
var fightModule = (function() {

})()


CommonJS and AMD==============
var module1 = require('module1');
function fight() {

}
module.exports = {
	fight:fight
}

ES6 Modules==============
import module1 from 'module1'
import module2 from 'module2'


Error===================
throw new Error		//this throws error and does not execute anything after this line

const myError = new Error("oopsie");
myError.name, myError.message, myError.stack

new SyntaxError
new ReferenceError


try-catch=================
function fail() {
  try {
    console.log('this works');	//returns
    throw new Error('oopsie');	//returns
  } catch(e) {
    console.log('error', e);
  } finally {
    console.log('still good');	//returns
    return 'returning from fail';	//returns
  }
  console.log('never going to get here'); // not reachable
}
fail();


Async Error handling=========
To handle async error we should use the promise and the catch block for that
We should always have catch block for the promise 

Promise.resolve('asyncfail')
    .then(response => {
        console.log(response)
        throw new Error('#1 fail')
    })
    .then(response => {
        console.log(response)
    })
    .catch(err => {
        console.error('error', err.message)
    })
    .then(response => {
        console.log('hi am I still needed?', response)
        return 'done'
    })
    .catch(err => {
        console.error(err)
        return 'failed'
    })


async await try catch===========
(async function() {
    try {
        await Promise.reject('oopsie')
    } catch (err) {
        console.error(err)
    }
    console.log('This is still good!')
})()
