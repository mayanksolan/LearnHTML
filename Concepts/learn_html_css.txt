If your screen size is too small then the columns in the grid will stack vertically instead of sitting side-by-side. 
To correct this issue you can change the col-lg-6  classes to col-md-6  instead.

===========Types os CSS selectors============

For
<p class="dotted">A dotted outline</p>
we can have -> p.dotted {outline-style: dotted;}
the above p and class without space means that the element must have both classes for the rule to apply

we can have -> p .dotted {outline-style: dotted;}
Spacing in between class specifiers means a ascendant -> descendant relationship.

==========background-repeat=============
body {
  background-image: url("gradient_bg.png");
  background-repeat: repeat-x;
}
repeat-x = repeat the image on x axis
repeat-y = repeat the image on y axis
repeat = repeat the image on both axis
no-repeat = don't repeat the image on any axis

==========background-position==========
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: center top;
  margin-right: 200px;
}
background-position: top; (bottom, left, right, center)
background-position: center top;
background-position: left top;
background-position: right top;
background-position: 25% 75%;
background-position: bottom 50px right 100px;
background-position: right 35% bottom 45%;


===========background-attachment===========
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  background-attachment: fixed;
}
background-attachment: scroll;
background-attachment: fixed;
background-attachment: local;

==========shorthand background=============
body {
  background: #ffffff url("img_tree.png") no-repeat right top;
}


===========border==============
boder-style : dotted,dashed,solid ,double,groove,ridge ,inset ,outset,none,hidden
border-width: 2px 10px 4px 20px;
border-color: any color
p {
  border-top-style: dotted;
  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;
}
p {
  border: 5px solid red;
}
p {
  border-left: 6px solid red;
  background-color: lightgrey;
}
Curved border
p {
  border: 2px solid red;
  border-radius: 5px;
}

this removes the auto border created with html
border-collapse: collapse;


==========Margins===============
p {
  margin: 25px 50px 75px 100px;
}
top right bottom left

p {
  margin: 25px 50px 75px;
}
top 25, right and left 50, bottom 75


p {
  margin: 25px 50px;
}
top bottom 25, right left 50

below there is one div, inside which there is an anchor tag, so div already has left margin 100, the same is inherited in anchor tag as well
div {
  border: 1px solid red;
  margin-left: 100px;
}
p.ex1 {
  margin-left: inherit;
}

horizonatally center 
div {
  width: 300px;
  margin: auto;
  border: 1px solid red;
}

Collapse margin
h1 {
  margin: 0 0 50px 0;
}

h2 {
  margin: 20px 0 0 0;
}
In the example above, the <h1> element has a bottom margin of 50px and the <h2> element has a top margin set to 20px.
Common sense would seem to suggest that the vertical margin between the <h1> and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, the actual margin ends up being 50px.


=====================max width max height=====================

this makes sure the div width is max 500px, or we can use 50% also
div {
  max-width: 500px;
  height: 100px;
  background-color: powderblue;
}


=============Box Model============

Assume we want to style a <div> element to have a total width of 350px:
div {
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0; 
}
this becomes helpful if we want to place a content with border and all below an image of defined width


===============Outline==============
An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline.
p.dotted {outline-style: dotted;}

p.ex3 {
  border: 1px solid black;
  outline-style: solid;
  outline-color: red;
  outline-width: thick;
}

p.ex1 {outline: dashed;}
p.ex2 {outline: dotted red;}
p.ex3 {outline: 5px solid yellow;}
p.ex4 {outline: thick ridge pink;}

The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.
p {
  margin: 30px;
  border: 1px solid black;
  outline: 1px solid red;
  outline-offset: 15px;
}

=================Text=============
The text-align property is used to set the horizontal alignment of a text.
A text can be left or right aligned, centered, or justified.
h1 { text-align: center; }

The text-decoration property is used to set or remove decorations from text.
The value text-decoration: none; is often used to remove underlines from links: Others -> overline, line-through, underline
h1 { text-decoration: overline; }

The text-transform property is used to specify uppercase and lowercase letters in a text.
p.class1 { text-transform: capitalize; }

The text-indent property is used to specify the indentation of the first line of a text:
p { text-indent: 50px; }

The letter-spacing property is used to specify the space between the characters in a text.
h1 { letter-spacing: 3px; }

The line-height property is used to specify the space between lines:
p.class1 { line-height: 1.8; }

The direction property is used to change the text direction of an element:
p { direction: rtl; }

The word-spacing property is used to specify the space between the words in a text.
h1 { word-spacing: 10px; }

The following shadow example specifies the position of the horizontal shadow (3px), the position of the vertical shadow (2px) and the color of the shadow (red):
h1 { text-shadow: 3px 2px red; }


=================Fonts====================
Serif		Times New Roman		fonts have small lines at the ends on some characters
			Georgia	Serif 		
Sans-serif	Arial				"Sans" means without - these fonts do not have the lines at the ends of characters
			Verdana	
Monospace	Courier New			All monospace characters have the same width
			Lucida Console	
			
font-style = normal, italic, oblique
p.class1 { font-style: normal; }

Setting the text size with pixels gives you full control over the text size:
h1 {  font-size: 40px;}

To allow users to resize the text (in the browser menu), many developers use em instead of pixels.
1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.
The size can be calculated from pixels to em using this formula: pixels/16=em

The font-weight property specifies the weight of a font: normal, bold
p.normal {  font-weight: normal;}

The text size can be set with a vw unit, which means the "viewport width". That way the text size will follow the size of the browser window:
<h1 style="font-size:10vw">Hello World</h1>

The font-variant property specifies whether or not a text should be displayed in a small-caps font.
p.small { font-variant: small-caps; }


===============Lists================
ul.a {  list-style-type: circle;}
ul.b {  list-style-type: square;}
ol.c {  list-style-type: upper-roman;}
ol.d {  list-style-type: lower-alpha;}

ul.a {  list-style-position: outside;}
ul.b {  list-style-position: inside;}

ul {  	list-style-type: none;
		margin: 0;
		padding: 0;		}
		
shorthand property
ul { list-style: square inside url("sqpurple.gif"); }


==================Tables=================
table, th, td {
  border: 1px solid black;
}

The vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>.
By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements).
The following example sets the vertical text alignment to bottom for <td> elements:
td {
  height: 50px;
  vertical-align: bottom;
}

To control the space between the border and the content in a table, use the padding property on <td> and <th> elements:
th, td {
  padding: 15px;
  text-align: left;
}

Add the border-bottom property to <th> and <td> for horizontal dividers:
th, td {
  border-bottom: 1px solid #ddd;
}

Set the border to "2px solid green" for table, th and td elements.
table, th, td { border: 2px solid green; }

Collapse the table borders into a single border.
table { border-collapse: collapse; }


=====================Display==================
span { display: block; } this will display span across the full width

li { display: inline; } this will show all li elements in one one line (in a block)

h1.hidden { display: none; } -> both will hide the heading - this one will remove from page
h1.hidden { visibility:hidden; } - this will just hide it, but will remian on page