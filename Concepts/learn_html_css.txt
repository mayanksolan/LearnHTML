If your screen size is too small then the columns in the grid will stack vertically instead of sitting side-by-side. 
To correct this issue you can change the col-lg-6  classes to col-md-6  instead.

===========Types of CSS selectors============
For
<p class="dotted">A dotted outline</p>
we can have -> p.dotted {outline-style: dotted;}
the above p and class without space means that the element must have both classes for the rule to apply

we can have -> p .dotted {outline-style: dotted;}
Spacing in between class specifiers means a ascendant -> descendant relationship.

==========background-repeat=============
body {
  background-image: url("gradient_bg.png");
  background-repeat: repeat-x;
}
repeat-x = repeat the image on x axis
repeat-y = repeat the image on y axis
repeat = repeat the image on both axis
no-repeat = don't repeat the image on any axis

==========background-position==========
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: center top;
  margin-right: 200px;
}
background-position: top; (bottom, left, right, center)
background-position: center top;
background-position: left top;
background-position: right top;
background-position: 25% 75%;
background-position: bottom 50px right 100px;
background-position: right 35% bottom 45%;


===========background-attachment===========
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  background-attachment: fixed;
}
background-attachment: scroll;
background-attachment: fixed;
background-attachment: local;

==========shorthand background=============
body {
  background: #ffffff url("img_tree.png") no-repeat right top;
}


===========border==============
boder-style : dotted,dashed,solid ,double,groove,ridge ,inset ,outset,none,hidden
border-width: 2px 10px 4px 20px;
border-color: any color
p {
  border-top-style: dotted;
  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;
}
p {
  border: 5px solid red;
}
p {
  border-left: 6px solid red;
  background-color: lightgrey;
}
Curved border
p {
  border: 2px solid red;
  border-radius: 5px;
}

this removes the auto border created with html
border-collapse: collapse;


==========Margins===============
p {
  margin: 25px 50px 75px 100px;
}
top right bottom left

p {
  margin: 25px 50px 75px;
}
top 25, right and left 50, bottom 75


p {
  margin: 25px 50px;
}
top bottom 25, right left 50

below there is one div, inside which there is an anchor tag, so div already has left margin 100, the same is inherited in anchor tag as well
div {
  border: 1px solid red;
  margin-left: 100px;
}
p.ex1 {
  margin-left: inherit;
}

horizonatally center 
div {
  width: 300px;
  margin: auto;
  border: 1px solid red;
}

Collapse margin
h1 {
  margin: 0 0 50px 0;
}

h2 {
  margin: 20px 0 0 0;
}
In the example above, the <h1> element has a bottom margin of 50px and the <h2> element has a top margin set to 20px.
Common sense would seem to suggest that the vertical margin between the <h1> and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, the actual margin ends up being 50px.


=====================max width max height=====================

this makes sure the div width is max 500px, or we can use 50% also
div {
  max-width: 500px;
  height: 100px;
  background-color: powderblue;
}


=============Box Model============

Assume we want to style a <div> element to have a total width of 350px:
div {
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0; 
}
this becomes helpful if we want to place a content with border and all below an image of defined width


===============Outline==============
An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline.
p.dotted {outline-style: dotted;}

p.ex3 {
  border: 1px solid black;
  outline-style: solid;
  outline-color: red;
  outline-width: thick;
}

p.ex1 {outline: dashed;}
p.ex2 {outline: dotted red;}
p.ex3 {outline: 5px solid yellow;}
p.ex4 {outline: thick ridge pink;}

The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.
p {
  margin: 30px;
  border: 1px solid black;
  outline: 1px solid red;
  outline-offset: 15px;
}

=================Text=============
The text-align property is used to set the horizontal alignment of a text.
A text can be left or right aligned, centered, or justified.
h1 { text-align: center; }

The text-decoration property is used to set or remove decorations from text.
The value text-decoration: none; is often used to remove underlines from links: Others -> overline, line-through, underline
h1 { text-decoration: overline; }

The text-transform property is used to specify uppercase and lowercase letters in a text.
p.class1 { text-transform: capitalize; }

The text-indent property is used to specify the indentation of the first line of a text:
p { text-indent: 50px; }

The letter-spacing property is used to specify the space between the characters in a text.
h1 { letter-spacing: 3px; }

The line-height property is used to specify the space between lines:
p.class1 { line-height: 1.8; }

The direction property is used to change the text direction of an element:
p { direction: rtl; }

The word-spacing property is used to specify the space between the words in a text.
h1 { word-spacing: 10px; }

The following shadow example specifies the position of the horizontal shadow (3px), the position of the vertical shadow (2px) and the color of the shadow (red):
h1 { text-shadow: 3px 2px red; }


=================Fonts====================
Serif		Times New Roman		fonts have small lines at the ends on some characters
			Georgia	Serif 		
Sans-serif	Arial				"Sans" means without - these fonts do not have the lines at the ends of characters
			Verdana	
Monospace	Courier New			All monospace characters have the same width
			Lucida Console	
			
font-style = normal, italic, oblique
p.class1 { font-style: normal; }

Setting the text size with pixels gives you full control over the text size:
h1 {  font-size: 40px;}

To allow users to resize the text (in the browser menu), many developers use em instead of pixels.
1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.
The size can be calculated from pixels to em using this formula: pixels/16=em

The font-weight property specifies the weight of a font: normal, bold
p.normal {  font-weight: normal;}

The text size can be set with a vw unit, which means the "viewport width". That way the text size will follow the size of the browser window:
<h1 style="font-size:10vw">Hello World</h1>

The font-variant property specifies whether or not a text should be displayed in a small-caps font.
p.small { font-variant: small-caps; }


===============Lists================
ul.a {  list-style-type: circle;}
ul.b {  list-style-type: square;}
ol.c {  list-style-type: upper-roman;}
ol.d {  list-style-type: lower-alpha;}

ul.a {  list-style-position: outside;}
ul.b {  list-style-position: inside;}

ul {  	list-style-type: none;
		margin: 0;
		padding: 0;		}
		
shorthand property
ul { list-style: square inside url("sqpurple.gif"); }


==================Tables=================
table, th, td {
  border: 1px solid black;
}

The vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>.
By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements).
The following example sets the vertical text alignment to bottom for <td> elements:
td {
  height: 50px;
  vertical-align: bottom;
}

To control the space between the border and the content in a table, use the padding property on <td> and <th> elements:
th, td {
  padding: 15px;
  text-align: left;
}

Add the border-bottom property to <th> and <td> for horizontal dividers:
th, td {
  border-bottom: 1px solid #ddd;
}

Set the border to "2px solid green" for table, th and td elements.
table, th, td { border: 2px solid green; }

Collapse the table borders into a single border.
table { border-collapse: collapse; }

<table>New Table
  <tr>
    <th>Firstname</th>
    <th>Lastname</th> 
    <th>Age</th>
  </tr>
  <tr>
    <td>Jill</td>
    <td>Smith</td> 
    <td>50</td>
  </tr>
  <tr>
    <td>Eve</td>
    <td>Jackson</td> 
    <td>94</td>
  </tr>
</table>


=====================Display==================
span { display: block; } this will display span across the full width

li { display: inline; } this will show all li elements in one one line (in a block)

h1.hidden { display: none; } -> both will hide the heading - this one will remove from page
h1.hidden { visibility:hidden; } - this will just hide it, but will remian on page

Inline-Block
Inline-block elements are similar to inline elements, except they can have padding and margins added on all four sides. Youâ€™ll have to declare display: inline-block in your CSS code.
https://medium.com/@DaphneWatson/css-display-properties-block-inline-and-inline-block-how-to-tell-the-difference-7d3a1e6e3051

===============Float===============
<style>img {  float: right;}</style>
The following example specifies that an image should float to the right in a text:
<p><img src="pineapple.jpg" alt="Pineapple" style="width:170px;height:170px;margin-left:15px;">
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit.</p>

.clearfix {
  overflow: auto;
}

.img2 {
  float: right;
}
<div class="clearfix">
  <img class="img2" src="pineapple.jpg" alt="Pineapple" width="170" height="170">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum...
</div>


==================Flex==============
A container with "flex-wrap: nowrap;" will never wrap its items.
.flex-container {
  display: flex;
  flex-wrap: nowrap;
  background-color: DodgerBlue;
}

flex-wrap: wrap; -. this will wrap the images based on screen size
justify-content: space-between; -> The space-between value displays the flex items with space between the lines:

perfect center
.flex-container {
  display: flex;
  height: 300px;
  justify-content: center;
  align-items: center;
}


================FlexBox==============

<div class="container">
<h1 class="item">Hello</h1><h1 class="item">There,</h1><h1 class="item">Are</h1><h1 class="item">You</h1><h1 class="item">Ready</h1><h1 class="item">To</h1><h1 class="item">Rock</h1><h1 class="item">&</h1><h1 class="item">Roll, because we are are ready</h1>
</div>

.container {
  display: flex;
  flex-direction: row;  // row | row-reverse | column | column-reverse;  -> here reverse means that the the elements will be placed in reverse order
  flex-wrap:wrap;	// nowrap | wrap | wrap-reverse;
  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly; //
}

.item {
  flex-grow:1;	// this means that all the elements will be justified across container
  border:1px solid powderBlue;
  text-align:center;
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}


===============Mouse click events=============

-------------onclick------------
<button onclick="displayDate()">The time is?</button>
<script>
function displayDate() {
  document.getElementById("demo").innerHTML = Date();
}
</script>
<p id="demo"></p>


-----------------onmouseover---------------
<div onmouseover="mOver(this)" onmouseout="mOut(this)" 
style="background-color:#D94A38;width:120px;height:20px;padding:40px;">
Mouse Over Me</div>

<script>
function mOver(obj) {
  obj.innerHTML = "Thank You"
}
function mOut(obj) {
  obj.innerHTML = "Mouse Over Me"
}
</script>

----------onmousedown, onmouseup-------------
<div onmousedown="mDown(this)" onmouseup="mUp(this)"
style="background-color:#D94A38;width:90px;height:20px;padding:40px;">
Click Me</div>

<script>
function mDown(obj) {
  obj.style.backgroundColor = "#1ec5e5";
  obj.innerHTML = "Release Me";
}
function mUp(obj) {
  obj.style.backgroundColor="#D94A38";
  obj.innerHTML="Thank You";
}
</script>

------------addEventListener()-------------
++++External Function++++++
<script>
document.getElementById("myBtn").addEventListener("click", displayDate);
function displayDate() {
  document.getElementById("demo").innerHTML = Date();
}
</script>

+++++++++++Inner Function+++++
<script>
document.getElementById("myBtn").addEventListener("click", function() {
  alert("Hello World!");
});
</script>

++++++Multiple Functions++++++
<script>
var x = document.getElementById("myBtn");
x.addEventListener("click", myFunction);
x.addEventListener("click", someOtherFunction);
function myFunction() {
  alert ("Hello World!");
}
function someOtherFunction() {
  alert ("This function was also executed!");
}
</script>

element.addEventListener("mouseover", myFunction);
element.addEventListener("click", mySecondFunction);
element.addEventListener("mouseout", myThirdFunction);
window.addEventListener("resize", function(){
  document.getElementById("demo").innerHTML = Math.random();
});

++++++++Bubbling vs Capturing++++++++
addEventListener(event, function, useCapture);
useCapture by default is false, which means when an inner element is click, its eventlister is activated, then the outer element
when it is true, outer element then inner element

+++++++remove eventlistener+++++++++
document.getElementById("myDIV").removeEventListener("mousemove", myFunction);
}


((((((((((((DOM Selector methods))))))))))))
document.getElementById()
document.getElementsByClassName() - var tags = document.getElementsByClassName('bolded')[0];
document.getElementsByTagName() - var tags = document.getElementsByTagName('li');
document.querySelector() - FirstMatch
	e.g. - 	var tag = document.querySelector('#highlight'); //
			var tags = document.querySelector('li a.special');   // 
			var tag = document.querySelector('input[type="number"]');
document.querySelectorAll() - 

var link = document.querySelector('a'); 
		link.getAttribute('href');
		link.setAttribute('href', 'https://www.yahoo.com/');
		
==========ï‚§ DOM Events==========
element.addEventListener('type', functionToCall);

var button = document.querySelector('button'); // select element 
button.addEventListener('click', function() { // add event listener 
	console.log('The button has been clicked.'); // run code 
});

var lis = document.querySelectorAll('li'); 
for (var i = 0; i < lis.length; i++) { 
	lis[i].addEventListener('click', function() { 
		this.style.color = 'pink'; 
	}); 
}

(((((((((((((((((((JSON)))))))))))))))))))


======JSON.parse()============
var obj = JSON.parse('{ name: "John", age: 30, city: "New York" }');

======JSON.stringify==========
for converting json to string
var obj = { name: "John", age: 30, city: "New York" };
var myJSON = JSON.stringify(obj);








(((((((((((((((((((JQuery)))))))))))))))))))

Basic syntax is: $(selector).action()

<script>
$(document).ready(function(){
  $("button").click(function(){
    $("#test").hide();
  });
});
</script>

<p id="test">This is another paragraph.</p>
<button>Click me</button>

$("*")						Selects all elements	
$(this)						Selects the current HTML element	
$("p.intro")				Selects all <p> elements with class="intro"	
$("p:first")				Selects the first <p> element	
$("ul li:first")			Selects the first <li> element of the first <ul>	
$("ul li:first-child")		Selects the first <li> element of every <ul>	
$("[href]")					Selects all elements with an href attribute	
$("a[target='_blank']")		Selects all <a> elements with a target attribute value equal to "_blank"	
$("a[target!='_blank']")	Selects all <a> elements with a target attribute value NOT equal to "_blank"	
$(":button")				Selects all <button> elements and <input> elements of type="button"	
$("tr:even")				Selects all even <tr> elements	
$("tr:odd")					Selects all odd <tr> elements


=================events=======================

Mouse Events	Keyboard Events		Form Events		Document/Window Events
click			keypress			submit			load
dblclick		keydown				change			resize
mouseenter		keyup				focus			scroll
mouseleave	 						blur			unload

$("p").click(function(){
  $(this).hide();
});

$("p").dblclick(function(){
  $(this).show();
});

$("#p1").mouseenter(function(){
  alert("You entered p1!");
});

$("#p1").mouseleave(function(){
  alert("Bye! You now leave p1!");
});

$("#p1").mousedown(function(){
  alert("Mouse down over p1!");
});

$("#p1").mouseup(function(){
  alert("Mouse up over p1!");
});

The hover() method takes two functions and is a combination of the mouseenter() and mouseleave() methods. The first function is executed when the mouse enters the HTML element, and the second function is executed when the mouse leaves the HTML element:
$("#p1").hover(function(){
  alert("You entered p1!");
},
function(){
  alert("Bye! You now leave p1!");
});

$("input").focus(function(){
  $(this).css("background-color", "#cccccc");
});

===============on===============
$("p").on("click", function(){
  $(this).hide();
});

multiple methods
$("p").on({
  mouseenter: function(){
    $(this).css("background-color", "lightgray");
  }, 
  mouseleave: function(){
    $(this).css("background-color", "lightblue");
  }, 
  click: function(){
    $(this).css("background-color", "yellow");
  } 
});


==================hide, show=============
$(selector).hide(speed,callback);
$(selector).show(speed,callback);

the below one takes a second to hide - values: "slow", "fast", or milliseconds.
$("button").click(function(){
  $("p").hide(1000);
});

toggle hide/show
$("button").click(function(){
  $("p").toggle();
});


===============fade==================
$(selector).fadeIn(speed, callback);
$(selector).fadeOut(speed,callback);
$(selector).fadeToggle(speed,callback);
$(selector).fadeTo(speed,opacity,callback);

$("button").click(function(){
  $("#div1").fadeIn();
  $("#div2").fadeIn("slow");
  $("#div3").fadeIn(3000);
});


=================slide============
$("#flip").click(function(){
  $("#panel").slideDown();
});

$("#flip").click(function(){
  $("#panel").slideUp();
});

$("#flip").click(function(){
  $("#panel").slideToggle();
});


====================Javascript Closures===============
var add = (function () {
  var counter = 0;
  return function () {counter += 1; return counter}
})();

add();
add();
add();

// the counter is now 3

The variable add is assigned the return value of a self-invoking function.
The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.
This way add becomes a function. The "wonderful" part is that it can access the counter in the parent scope.
This is called a JavaScript closure. It makes it possible for a function to have "private" variables.
The counter is protected by the scope of the anonymous function, and can only be changed using the add function.

A closure is a function having access to the parent scope, even after the parent function has closed.


======================Javascript Prototypes===================

https://www.w3schools.com/js/js_object_prototypes.asp
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}
Person.prototype.nationality = "English";
Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};


==========================var & let difference - 

It can be said that a variable declared with var is defined throughout the program as compared to let. var can be defined anywhere in the progrom, but its scope is present in full program, on thee other hand let scope is only presenet after it is defined in a program only in the block - https://codeburst.io/difference-between-let-and-var-in-javascript-537410b2d707

anonymous function javascript - https://helephant.com/2008/08/23/javascript-anonymous-functions/
var flyToTheMoon = function()
{
  alert("Zoom! Zoom! Zoom!");
}
flyToTheMoon();

===================css position - 
https://dzone.com/articles/css-position-relative-vs-position-absolute

static,relative,fixed,absolute,sticky
difference absolute & relative - 
	relative - means a block poistion will change relative to its own original position - top: 50px; it will shift its position 10 pixels down from where it would normally be, One is that it introduces the ability to use z-index on that element, which doesn't really work with statically positioned elements. Even if you don't set a z-index value, this element will now appear on top of any other statically positioned element. You can't fight it by setting a higher z-index value on a statically positioned element
	#div-1 {
		position:relative;
		top:20px;
		left:-40px;
	} - this will move 20px lower and 40px left
	absolute - This is a very powerful type of positioning that allows you to literally place any page element exactly where you want it. 
	#div-1a {
		position:absolute;
		top:0;
		right:0;
		width:200px;
	} - div-1a to the top right of the page
	If we set relative positioning on div-1 (parent), any elements (child) within div-1 will be positioned relative to div-1. Then if we set absolute positioning on div-1a(child), we can move it to the top right of div-1:
	
	float - For variable height columns, absolute positioning does not work, so let's come up with another solution.
	We can "float" an element to push it as far as possible to the right or to the left, and allow text to wrap around it. This is typically used for images, but we will use it for more complex layout tasks (because it's the only tool we have).
	#div-1a {
		float:left;
		width:200px;
	}
	
	z-index = The z-index property specifies the stack order of an element. An element with greater stack order is always in front of an element with a lower stack order.
			Note: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky).
			div#myBox {
				position:absolute;
				background-color:red;
				z-index:auto;  -> values can be 0,1,2,3,4....
			}
			https://www.w3schools.com/cssref/playit.asp?filename=playcss_z-index


=============CSS Pseudo class- 
A pseudo-class is used to define a special state of an element.
For example, it can be used to:
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

/* unvisited link */
a:link {  color: #FF0000;}
/* visited link */
a:visited {  color: #00FF00;}
/* mouse over link */
a:hover {  color: #FF00FF;}
/* selected link */
a:active {  color: #0000FF;}
Note: a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive.


===================CSS Pseudo Elements

The syntax of pseudo-elements:
selector::pseudo-element {
  property:value;
}
Notice the double colon notation - ::first-line versus :first-line
The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.

different types
p::first-line { color: #ff0000;}
p::first-letter { color: #ff0000;}
p.intro::first-letter { color: #ff0000;}

add some content before h1 or after h1
h1::before {content: url(smiley.gif);}
h1::after {content: url(smiley.gif);}

The ::selection pseudo-element matches the portion of an element that is selected by a user.
::selection {  color: red;   background: yellow;}


=========================CSS Specificity - 
Specificity Rules
1. If the element has inline styling, that automatically1 wins (1,0,0,0 points)
2. For each ID value, apply 0,1,0,0 points
3. For each class value (or pseudo-class or attribute selector), apply 0,0,1,0 points
4. For each element reference, apply 0,0,0,1 point
https://css-tricks.com/specifics-on-css-specificity/


=========================CSS Gradients - 

https://www.w3schools.com/css/css3_gradients.asp
CSS gradients let you display smooth transitions between two or more specified colors.
1. Linear Gradients (goes down/up/left/right/diagonally)
		background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
		Linear Gradient - Top to Bottom (this is default)
			#grad { background-image: linear-gradient(to right, red , yellow); } 		-> left to right red to yellow
			#grad { background-image: linear-gradient(to bottom right, red , yellow); } -> diagonal red to yellow
			#grad { background-image: linear-gradient(-90deg, red , yellow); } 			-> right to left red to yellow
			#grad { background-image: linear-gradient(green, red , yellow); }
		Transparency
			#grad { background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); }
		Repeating linear gradient
			#grad { background-image: repeating-linear-gradient(red, yellow 10%, green 20%); }
			
2. Radial Gradients (defined by their center)
		Syntax - background-image: radial-gradient(shape size at position, start-color, ..., last-color);
		Radial Gradient - Evenly Spaced Color Stops (this is default)
			#grad { background-image: radial-gradient(red, yellow, green); } 					-> evenly spaced colors
			#grad { background-image: radial-gradient(red 5%, yellow 15%, green 60%); } 		-> Differently Spaced Color Stops
			#grad { background-image: radial-gradient(circle, red, yellow, green); }			-> circle
			#grad { background-image: repeating-radial-gradient(red, yellow 10%, green 15%); }	-> Repeating a radial-gradient


=========================JS this Keyword -

https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c
In a method, this refers to the owner object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), and apply() can refer this to any object.

CAB -> Call, Apply, Bind
	Call - Calling one function from another in same object, The call() method takes arguments separately.
	Apply - The apply() method takes arguments as an array.
	Bind - The bind() method takes arguments in an array, but any other remaining arguments can be passed while calling.
	
Call - 
var firstPerson = { firstName: 'John', lastName: 'Doe', fullName: 
					function() { return this.firstName + ' ' + this.lastName; } } 
var secondPerson = { firstName: 'Mary', lastName: 'Jane' }

firstPerson.fullName.call(secondPerson);


Apply - 
var firstP = { name: 'John', addNumbers: function(a, b, c, d) 
							 { return this.name + ' calculated ' + (a+b+c+d); } } 
var secondP = { name: 'Jane' }

firstP.addNumbers.call(secondP, 1, 2, 3, 4); 
or
firstP.addNumbers.apply(secondP, [1, 2, 3, 4]);

=====================JS callback=====================

https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced
Callbacks are a great way to handle something after something else has been completed. By something here we mean a function execution. If we want to execute a function right after the return of some other function, then callbacks can be used.
Callbacks are a way to make sure certain code doesnâ€™t execute until other code has already finished execution.

Syntax - function add(a, b , callback) -> add() function is called with arguments a, b and callback, callback will be executed just after ending of add() function 

function doHomework(subject, callback) {
  alert(`Starting my ${subject} homework.`);
  callback();
}
doHomework('math', function() {
  alert('Finished my homework');
});

or or or or

function doHomework(subject, callback) {
  alert(`Starting my ${subject} homework.`);
  callback();
}
function alertFinished(){
  alert('Finished my homework');
}
doHomework('math', alertFinished);


============================JS Websocket=======================



=================null vs undefined - =======================

https://codeburst.io/javascript-whats-the-difference-between-null-undefined-37793b5bfce6
null is an assigned value. It means nothing.
undefined means a variable has been declared but not defined yet.
null is an object. undefined is of type undefined.
null !== undefined but null == undefined.


================================use strict - 
With strict mode, you can not, for example, use undeclared variables. also you cannot delete declared variables. It makes the JS secure.


=========================setInterval vs setTimeout - 
setTimeout(expression, timeout); runs the code/function once after the timeout. Once - AFTER x interval.
setInterval(expression, timeout); runs the code/function in intervals, with the length of the timeout between them. Repetitive - EVERY x interval.

The JavaScript prototype property also allows you to add new methods to objects constructors:

in a form like below 

<form onSubmit={this.onSubmit}>
	<input type="text" />
	<button>Submit</button>
</form>

if we place onClick inside button, that will make sure that onClick only triggers any action
But, if we place onSubmit in the form tag then it will make sure that button click or press enter both are taken care off

Semantic elements html 

<article>
<aside>
<details>
<figcaption>
<figure>
<footer>
<header>
<main>
<mark>
<nav>
<section>
<summary>
<time>






HTML Elements
<p>My first paragraph.</p>
<h1>My first paragraph.</p>
<br>


HTML Attributes - 

href is an attribute
<a href="https://www.w3schools.com">This is a link</a>

src is an attribute
<img src="img_girl.jpg">

Wrap this poem around HTML tags that will preserve all spaces and linebreaks when the element is displayed.
<pre>
</pre>

highlight text
<mark>Text</mark>

Add a line through (strikeout) the letters "blue" in the text below.
<p> My favorite color is <del>blue</del> red. </p>

tooltip means title element

Block level elements in HTML:
<address><article><aside><blockquote><canvas><dd><div><dl><dt><fieldset><figcaption><figure><footer><form><h1>-<h6><header><hr><li><main><nav><noscript><ol><p><pre><section><table><tfoot><ul><video>

Inline Elements
<a><abbr><acronym><b><bdo><big><br><button><cite><code><dfn><em><i><img><input><kbd><label><map><object><output><q><samp><script><select><small><span><strong><sub><sup><textarea><time><tt><var>


<link rel="stylesheet" href="mystyle.css">
<meta charset="UTF-8">


html layout

<header>
  <h2>Cities</h2>
</header>

<section>
  <nav>
    <ul>
      <li><a href="#">London</a></li>
      <li><a href="#">Paris</a></li>
      <li><a href="#">Tokyo</a></li>
    </ul>
  </nav>
  
  <article>
    <h1>London</h1>
    <p>London is the capital city of England. It is the most populous city in the  United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
    <p>Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.</p>
  </article>
</section>

<footer>
  <p>Footer</p>
</footer>

FLOAT - here nav takes 30% width and on the left and article takes rest 70% width and stacks on the right side of nav
nav {
  float: left;
  width: 30%;
}
article {
  float: left;
  width: 70%;
}

FLEX
section {
  display: flex;
}
nav {							--takes 1 out of 4 width
  flex: 1;
}
article {						--takes 3 out of 4 width
  flex: 3;
}



When making responsive web pages, add the following <meta> element in all your web pages:

Example : <meta name="viewport" content="width=device-width, initial-scale=1.0">


Media Queries
https://www.w3schools.com/html/tryit.asp?filename=tryhtml_responsive_media_query

placehold.it - images of your size